// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JSRuntime
import Foundation
import JavaScriptCore
import Swift
import _Concurrency
@_hasMissingDesignatedInitializers @objc public class JSCustomEvent : ObjectiveC.NSObject {
  @objc deinit
}
public class Runner {
  public init()
  public func createContext(name: Swift.String) throws -> JSRuntime.RunnerContext
  public func destroyContext(name: Swift.String)
  public func execute(name: Swift.String, code: Swift.String) -> JavaScriptCore.JSValue?
  public func execute(name: Swift.String, sourcePath: Swift.String) -> JavaScriptCore.JSValue?
  public func dispatchEvent(event: Swift.String)
  @objc deinit
}
public class RunnerContext {
  public init(vm: JavaScriptCore.JSVirtualMachine, name: Swift.String) throws
  public func run(source: Swift.String) -> JavaScriptCore.JSValue?
  public func run(sourceFile: Swift.String) throws -> JavaScriptCore.JSValue?
  public func getGlobalObject(obj: Swift.String) -> JavaScriptCore.JSValue?
  public func setGlobalObject(obj: Any, forName: Swift.String)
  public func dispatchEvent(event: Swift.String)
  @objc deinit
}
public enum RuntimeError : Swift.Error {
  case jsCoreError
  case sourceNotFound
  public static func == (a: JSRuntime.RuntimeError, b: JSRuntime.RuntimeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension JSRuntime.JSCustomEvent : JavaScriptCore.JSExport {}
extension JSRuntime.RuntimeError : Swift.Equatable {}
extension JSRuntime.RuntimeError : Swift.Hashable {}
